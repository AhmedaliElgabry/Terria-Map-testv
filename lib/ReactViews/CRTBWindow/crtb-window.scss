@import "~terriajs-variables";
@import "../../Sass/common/mixins";
@import "~react-datepicker/dist/react-datepicker.css";

.inputs-container {
  margin: 5px 10px;
}

.required {
  color: white;
}

.center-align {
  text-align: center;
}

.start-analysis-button {
  composes: btn from "../../Sass/common/_buttons.scss";
  composes: btn-primary from "../../Sass/common/_buttons.scss";
  font-family: "Open Sans", sans-serif;
  // background: $dark;
  color: white;
  text-align: center;

  width: 98%;
  border-radius: 2px;
  margin: 1%;
  height: 35px;
  padding: 2px;
  box-sizing: border-box;
}

.show-type-selector {
  composes: btn from "../../Sass/common/_buttons.scss";
  // composes: btn-primary from "../../Sass/common/_buttons.scss";

  background: transparent;
  color: white;
  text-align: center;

  width: auto;
  float: right;

  text-align: center;
  padding: 0 2px;
  font-size: 9px;
  height: 25px;

  svg {
    font-weight: bold;
    fill: #ffffff;
  }
}

.icon--download {
  // the default icon styling for a dropdown is for a btn--primary, so we have to make some adjustments
  padding-right: 10px;
  svg {
    position: absolute;
    top: 6px;
    right: 5px;
    height: 15px;
    width: 15px;
    fill: currentColor;
  }
}

.icon--accordion {
  // the default icon styling for a dropdown is for a btn--primary, so we have to make some adjustments
  padding-right: 10px;
  svg {
    position: absolute;
    top: -25px;
    left: -25px;
    height: 14px;
    width: 14px;
    fill: currentColor;
  }
}

.icon--loader {
  svg {
    top: -20px;
    left: -30px;
  }
}

.dropdown {
  width: 100%;
}

.dropdown-list {
  display: flex;
  flex-direction: column;
  li a {
    // this makes sure the hover highlight fills the full width of the item
    display: block;
    padding-top: 0;
    padding-bottom: 0;
    width: 100%;
    @if variable-exists(text-link) {
      color: $text-link;
    }
    // Outside of a dropdown menu, links are normally shown with the same color on hover.
    // So, to provide some highlighting on hover in a dropdown menu, use the visited link color,
    // if it exists and is different from the unvisited link color.
    &:hover {
      @if variable-exists(text-visited-link) and
        variable-exists(text-link) and
        ($text-visited-link != $text-link)
      {
        color: $text-visited-link;
        text-decoration: $link-text-decoration;
      }
    }
  }
}

.dropdown__button {
  composes: btn--small from "../../Sass/common/_buttons.scss";
}

.section-container {
  font-size: 0.9em;
  margin: 2px 8px 3px 8px;
  padding: 4px;
  display: flex;
  flex-wrap: wrap;
  .react-datepicker__month-read-view {
    color: white !important;
  }
  legend {
    font-size: 0.9em;
  }
}

.controlGroup {
  min-height: 30px;
  border-right-width: 0;
  font-size: 0.9em;
  margin: 2px 5px;
  margin-right: 20px;
  border: none;
  padding: 5px;
  label {
    margin: 3px;
    padding-right: 5px;
    display: inline-block;
  }
  // width:40%;
}

.right {
  float: right;
}

.toggleLabel {
  div {
    display: inline-flex !important;
  }
  margin: 3px;
  font-size: 0.8em;
}

label {
  svg {
    height: 15px;
    width: 15px;
    display: inline-block;
    fill: #ffffff;
    stroke: #ffffff;
    margin-right: 1px;
    padding: 4px;
    vertical-align: middle;
  }
}

.color-band-item {
  display: inline-block;
  min-width: 15%;
  font-size: 0.8em;
  color: #fff;
  text-align: center;
  padding: 4px 20px;

  @media (max-width: $sm) {
    padding: 4px 10px;
  }
}

.parameters {
  p {
    margin: 4px;
  }
}

.requires-action {
  color: #ff2222;
  font-weight: 800;
}

.no-action-required {
  color: lightgreen;
  font-weight: 700;
}

.formWrapper {
  width: 100% !important;

  // & #root {
  //   width: 100% !important;
  //   border: none !important;
  // }

  & > div {
    width: 100% !important;

    & > #root,
    & > fieldset {
      width: 100% !important;
      border: none;
      margin: unset;
      padding: 5px 0;

      & > div {
        display: flex !important;
        justify-content: space-between;
        margin-bottom: 7px;
        padding: 4px unset;

        & > label {
          font-size: 13px;
          margin-bottom: 5px;
          width: 75%;
        }

        & .answersWrapper {
          color: #fff;
          box-shadow: inset 0 0 2px #fff;
          border: unset;
          text-align: center;
          vertical-align: middle;
          line-height: 20px;
          justify-content: center;
        }
      }
    }
  }
}

.progressBar {
  height: 35px;
  background-color: #c9c9c9;
  position: relative;
  color: white;
  width: 98%;
  border-radius: 2px;
  margin: 1%;
  height: 35px;
  box-sizing: border-box;

  &:before {
    content: attr(data-label);
    font-size: 1rem;
    position: absolute;
    text-align: center;
    padding-top: 5px;
    left: 0;
    right: 0;
  }

  & .value {
    background-color: #346aa6;
    display: inline-block;
    height: 100%;
  }
}

.blink {
  animation: blinker 1s linear infinite;
}

@keyframes blinker {
  50% {
    opacity: 0;
  }
}

.resultTable {
  & td {
    padding: 2px;
  }

  & tr:nth-child(odd) {
    background: lighten($color: #e7e7e79e, $amount: 0.5);
  }

  & .total {
    background: #363535a1;
    color: #ffffff;
  }
}
